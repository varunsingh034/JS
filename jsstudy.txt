var let const
var a;
var a = 'heloo';
let a;
let a = 'hedee';
const a = 0;


declaration and initialization

var a; // declare 
var a = 0; //declare and initialize

var a = 10; 
window me add karta hai
function scoped hota hai
aap firse declar kr sakte ho same name se and error nhi aayega

let a ;
let a = 10; //error

var is global and function scoped
let is global , block, function  scoped

reassignment, redeclaration

var a = 12;
a = 43;

let b = 445;
b = 342;

/ temporal dead zone --> area jitne me js ko pata to ha ki variable exist karta hat par wo aapko value nahi de sakta

console.log(a);

// cannot access before initialization
let a = 12 ;

let c = 2;


/ Hoisting impact per type
hoisting -> ek var ko jb js mein banaate hai to wo var do hisso me toot jaata hai and uska dclare part upparchala jata aht and uska init. part neeche reh jata hai

var a = undefined; // top

console.log(a);

a = 12;



console.log(a);
var a = 32; // no error out: undefined


console.log(a);
let a = 4;  // error


var x = 34;// global
{
    var x = 3; //block, but doesnot respect block
}

console.log(x);  // out: 3

let a = 34;
{
    let a = 2;
    console.log('inside',a);

    
}

console.log('outside',a);


// data types


primitives -> aisi saari values jiko copy karne par tume ek real copy mil jaaye
string, number, boolean, null, undefined, symbol, bigint


reference -> inlo copy larne par real copy nahi milegi but ek reference milega - parent ka
arrays, objects, function
 []   ,  {}    ,  ()

 let a = [1,2,3];
 let b = a;

 a.pop()

 console.log(a);
 console.log(b);


'' - single quotes
"" - double quotes
`` - backticks

// string 

let a = 'heloo'

// number

let num = 45;
num = 34.23;
num = 45;

// boolean

let bo = true;
bo = false;

// null -> matlab hai aapne jaan boojh alr loi value nahi di

let n = null;

// undefined -> matlab ki aapne ek var banaya aur usey value nahi di to jjo value by default mill wo hai undefined

let u;

// symbole -> unique immutable value

// future me hm koe libraries use karege ab is case me un lib. me kai baar kuchh fields hoti hai jisne similar hum bhi banaa dete hai aur galti se hamari banaai hi fiesds us lib ki original fields ko change kar dete hai

let sym = Symbol('uid');

// bigint 

let b = 9007199254740991n;
b = b+5n;
 

// arrays - []

let a = [1,2,3,4,5]
let b = a;

b.pop();

// objects - {}

let n = {
    name: 'hello'
}

function - ()



Dynaminc typing -> js me static type nhi  he and yaha par h dynamic typing jiska matlab hai app data ko change kar skte ho kyuki yaha par dynamic data type hai

typeof quirks (e.g., typeof null === 'boject')

type coercion ( == vs === )

-> concept jisme aapka ek type automatically convert ho jayega

truthy vs falsy values

falsy --> 0 false '' null undefined NaN documents.all

if (null){}

truthy --> everthing else

Predict teh result: ture + false, null + 1, 5 + '5' , !!undefined
                         1   ,       1     ,  55     ,   false

//////////// why NaN is not a number but true
typeof NaN === 'number'; // true

////////undefined vs null

let x;
console.log(x); /// undefined

let y = null;
console.log(y); /// null


'5' + 1 // '51'
'5' - 1 // 4

////////// operators 

arithmetic , comparsion , logical, assignment , unary, turnary


// arithmetic
+ - * / % **

1 + 2 = 3 
'5' + 1 = 51

4/2 = 2
2*2 = 4
5%2 = 1 
12 - 2 = 10
2 ** 3 = 8 

/// comparsion
== ===
< > <= >= ! != !== !!

12 == 13 // false
12 == '12' // true
12 === '12' // false

12 != 13 // true
12 != '12' // false
12 !== '12' // true

12 > 11 // true
12 < 13 // true
12 > 11 // false
12 <= 12 // true

//////// assignment

=  += -= *= /= %=

let a = 12;
a +=3; // 15
a -= 2; // 13
a *= 2 // 26
a /= 2 // 13
a %= 2 // 1


///////// logical 

/ && || ! 

 true && true -> true 
false && ture -> false
true && false -> false
false && false -> false

true || true -> true
false || true -> true
true || false -> true
false || false -> false

! true -> false
! false -> true

/// unary 

/  + - ! typeof ++  --

+'5' -> 5
-5 -> -5
!23 -> type inverted
let a = 12;  ++a -> 13 a++ -> 12
let a = 12; --a -> 11 a-- 12

//////  ternary

? :

condition ?  ture : false;

12 > 13 ? true : fasle;



///////////// typeof and instances


typeof used with premitive dt
instance used with references dt



// typeof null === object
/ typeod [] === object
// typeof NaN === number


// let a = 12 
a instanceof Array === ture
/  a inctanceof number == false
let b = {} , b instanceof array === ture


////////  if else else if

if (){

}
else if(){

}
else if(){

}

else{
    
}


//////// switch case

switch(val){
    case 1:
        break;
    case 2:
        break;
    case 3:
        break;
    default:
        break;
}


//////// early return pattern


function getVal(val){
    if(val) return 'A';
    else return 'B';
}



//////////// loops

// for while do...while

/ for loop

1 --- 1000

for (start ; end ; change ){
    
}

for ( let i = 0 ; i < 10 ; i++){
    console.log(i);

    
}


////// while 


start 
while ( condition ){
     change 
}

let i = 1;
while(i<32){
    console.log(i);
    i++;
}


//// break 

for ( let i = 1 ; i <6 ; i ++ ){
    console.log(i);
    if (i == 3) break;
    
}

/// continue 



for ( let i = 1 ; i <6 ; i ++ ){
    if (i === 3 ){
        continue;
    }
    console.log(i);
}

////// print num from 1 to 10 

for (let i = 1; i <=10 ; i++) console.log(i);

// print num from 10 to 1 

for ( let i  = 10 ; 1 <= i ; i-- ) console.log(i);

////// print even num from 1 to 20 

for (let i = 1; 20 >= i ; i++ ) if(i%2 === 0) console.log(i);

/////// print odd num from1 to 15 ( while )

let i = 1;
while(15 >= i){
    if(i%2 !== 0) console.log(i);
    i++;   
}


//// print the multiplication table of 5 ( 5x1 = 1  .......  5x10 = 50 )


for ( let i = 1; i<10 ; i++){
    console.log(`5 X ${i} = ${5*i}`);
}


/////// print the sum of num 1 form 100
let sum = 0;
for ( let i = 0; i <= 100; i++){
    sum += i;
}
console.log(sum);


////// print all num between 1 to 50 divisible by 3

for ( let i = 0; i<=50; i++){
    if(i%3 === 0) console.log(i);
    
}

////// ask user for a number and print each num from 1 to that num is even of odd

let val = Number(prompt('Enter a Num'));
for (let i = 1; i <= val; i++){
    if(i%2 === 0) console.log(`${i} is even`);
    else console.log(`${i} is odd`);
    
}


// print how many num are div by 3 and 5 both between 1 to 100

for ( let i = 1 ; i<= 100; i++){
    if(i%3 === 0 && i%5 === 0 ) console.log(i);
}


//////  stop at first multiple of 7

for ( let i = 1; i<= 100 ; i++){
    console.log(i);
    if ( i % 7 === 0) break;
}

/////// skip multiple of 3

for ( let i= 1; i< 30 ; i++){
    if(i%3 === 0) continue;
    console.log(i);
    
}

///////// print first finve odd numbers


count = 0
for ( let i = 1;i<100 ; i++){
    if(i%2 !== 0 ) {
        console.log(i);
        count++;
    }
    if(count === 5){
        break;
    }
}


/////////// functions

function lolo(){
}

let fnc = function (){
    console.log('herwerf');
}

let fnc = () => {
}

///// jab argument kai saare ho to humein utne hi parameter banane padege, issey bachne ke liye , hum rest ka use karte h ... agar function ke parameter space mein lage to wo rest operator hai and agar wo arra 
function abc(...val){
    console.log(val);
    
}
abc()


/////// early return

function abcd(){
    return 235;
}
console.log(abcd());


/////// first clss fnc --> fnc ko values ki tarah treat kar sakte ho

function abc(val){
    val();
}
abc(function(){
    console.log('hello');
});

////////// higher order functions ----> wo jo return kare ek function or accept kare ek function apne parameter me 
function abc(){
    return function(){
        console.log(i);
    }
}
abc()()


//// pure fnc and inpure fnc
/ aiss fnc jo ki bahar ki value ko naa badale wo hai pure fnc

let a = 12;
function abc(){
    console.log('hehehe');
}


/ aiss fnc ho ki bahar ki value ko badal de wo impure fnc h

function abc(){
    a++
}


////////// closures -> ek fnc jo return kare ek aur fnc aur return hone wale fnc humesha use kare parent fnc ka koi variable
function abc(){
    let a = 12;
    return function(){
        console.log(a);
    }
}



///// lexical scoping

function ab(){
    let a;
    function de(){
        let b;
        functiongh(){
            let c;
        }
    }
}


/////// IIFE - imediatly invoke fun. expression
(function(){
})();


///// hoisting differernc 

abc()


function abc(){
    console.log('he');
}

///// what the differece bitween func decla. and expression in terms of hoisting

abc()


 let abc = function (){
    console.log('he');
}
greet();
function greet(){
    console.log('hello');

}


let mul = (a,b) => {
    return a*b;
}

//// use rest parameter to accept any num of scores ans return the total.

function getScore(...scores){
    let total = 0;
    scores.forEach(function(val){
        total = total +val
    })
    return total;
console.log(getScore(1,2,4,4,4));
}

///////////// bmi calculator 

function bmi(weight,height){
     return (weight / (height * height))
}
console.log(bmi(85,1.8).toFixed(2));


/////// discount calculator
function discal(discount){
    return function(price){
        return price - price * (discount/100);
    }
}
let discounter = discal(10);
console.log(discounter(200));


/////////////////  Array

creation of arr
let arr = new Array();

let arr = [1,2,30,40,5];
arr[4]


modify
arr[4] = 34;


methods
arr.push(7000)) insertt at end
arr.pop()  remove from end
arr.shift() remove from start
arr.splice(2,1) (where, how much) values to remove
arr.slice(2,1) return a new copy of arr with specific size (start , end)
arr.reverse()

arr.sort(function(a,c){
return a-b })   a-b for ascending and b-a for descending

arr.forEach(function(val){
    (val+5)
})                itrat through all elements

/// map srf tab use karna h jab ek nya array banana h pichle arr ke data ke base pa

map dikhte hi daath mnm mein ek black array bana liya karo

let newarr = arr.map(function(val){
    if(val>10) return val;
})

jab bhi esa case mile jb koi naya array banega

arr.filter(function(val){
    return 'true or false'
})                           return only true or false and fnc return ahte val


let newarr = arr.reduce(function(accumulator,val){
    return accumulator + val;
})           

let arr = [
    {id:2,key:2},
    {id:1,key:1},
    {id:3,key:3}
]

let newarr = arr.find(function(val){
    return val == 1;
})


let any = arr.some(function(val){
    return val>85;
})

let all = arr.every(function(val){
    return val>5;
})

let [a,b] = [1,2,3,4,5];
console.log(a,b);

let arr = [1,2,3,4,5,6,7,8,9,10]
let ar2 = [...arr]          sprreding


let fruti = ['Apple','Banana','Mango','Pineapple']
fruti.push('Kiwi')
fruti.pop()
fruti.unshift('Orange')


let arr = [1,2,3,4,5,6,7,8,9,10]
let narr = arr.map(function(val){
    return val*val;
})


let arr = [10,43,56,23,5,8,23]
let narr = arr.filter((val)=>{
    return val>10;
})

/////// objects  

key and value 

let obj = {
    name: 'varu',
    age: 34,
    kahana: 'dal'
}


 






